#include <GL/freeglut.h>
#include <iostream>
#include <string>
#include <vector>
#include <cstdlib> // for rand()
#include <cmath>   // for animation

// Define the button structure
struct Button {
    std::string label;
    float x, y, width, height;
    void (*onClick)();
};

// Progress structure
struct PlayerProfile {
    std::string username;
    float progress;  // 0 to 1 for percentage completion
};

// Declare buttons, floating letters, and profile
std::vector<Button> buttons;
std::vector<std::pair<char, std::pair<float, float>>> floatingLetters;
PlayerProfile playerProfile = { "Player1", 0.45f };  // Example profile with 45% progress

// Window size
int windowWidth = 800;
int windowHeight = 600;

// Colors for gradient background
float topColor[] = { 0.2f, 0.6f, 1.0f };    // Light blue
float bottomColor[] = { 0.1f, 0.3f, 0.5f }; // Darker blue

// Daily challenge progress
float dailyChallengeProgress = 0.75f;  // Example: 75% of daily challenges completed

// Function Prototypes
void display();
void reshape(int, int);
void onMouseClick(int, int, int, int);
void renderButton(Button&);
void playButtonAction();
void continueButtonAction();
void achievementsButtonAction();
void rewardsButtonAction();
void leaderboardButtonAction();
void howToPlayButtonAction();
void settingsButtonAction();
void exitButtonAction();
void drawText(float, float, const std::string&);
void drawGradientBackground();
void drawFloatingLetters();
void drawProfileWidget();
void drawProgressBar(float, float, float, float, float);
void drawDailyChallenges();
void drawSidebar();
void initFloatingLetters();
void drawAchievementBadges();
void playButtonAnimation(Button&);

// Initialize buttons with labels, positions, and actions
void initButtons() {
    buttons.push_back({ "Play", 100, 450, 200, 50, playButtonAction });
    buttons.push_back({ "Continue Progress", 100, 370, 200, 50, continueButtonAction });
    buttons.push_back({ "Achievements", 100, 290, 200, 50, achievementsButtonAction });
    buttons.push_back({ "Rewards", 100, 210, 200, 50, rewardsButtonAction });
    buttons.push_back({ "Leaderboard", 100, 130, 200, 50, leaderboardButtonAction });
    buttons.push_back({ "How to Play", 400, 450, 200, 50, howToPlayButtonAction });
    buttons.push_back({ "Settings", 400, 370, 200, 50, settingsButtonAction });
    buttons.push_back({ "Exit", 400, 290, 200, 50, exitButtonAction });
}

// Display function for rendering the intro window
void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Draw gradient background
    drawGradientBackground();

    // Draw floating letters in the background
    drawFloatingLetters();

    // Draw game logo at the center top
    drawText(250, 550, "AI Crossword Game");

    // Draw tagline below the game logo
    drawText(240, 520, "Unleash the Puzzle Master in You!");

    // Render all buttons with animations
    for (Button& button : buttons) {
        playButtonAnimation(button);  // Button animations
        renderButton(button);
    }

    // Draw player profile widget with progress
    drawProfileWidget();

    // Draw daily challenge progress
    drawDailyChallenges();

    // Draw achievement badges
    drawAchievementBadges();

    // Draw the sidebar
    drawSidebar();

    glutSwapBuffers();
}

// Render each button with a label and animate glowing effect
void renderButton(Button& button) {
    // Draw button rectangle
    glColor3f(0.2f, 0.6f, 0.8f); // Button color
    glBegin(GL_QUADS);
    glVertex2f(button.x, button.y);
    glVertex2f(button.x + button.width, button.y);
    glVertex2f(button.x + button.width, button.y - button.height);
    glVertex2f(button.x, button.y - button.height);
    glEnd();

    // Draw button label
    drawText(button.x + 30, button.y - 30, button.label);
}

// Reshape window callback
void reshape(int width, int height) {
    windowWidth = width;
    windowHeight = height;
    glViewport(0, 0, windowWidth, windowHeight);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, windowWidth, 0, windowHeight);
    glMatrixMode(GL_MODELVIEW);
}

// Handle mouse click events
void onMouseClick(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        for (Button& btn : buttons) {
            if (x > btn.x && x < btn.x + btn.width && windowHeight - y > btn.y - btn.height && windowHeight - y < btn.y) {
                btn.onClick();
            }
        }
    }
}

// Draw text on the screen
void drawText(float x, float y, const std::string& text) {
    glColor3f(1, 1, 1); // Text color
    glRasterPos2f(x, y);
    for (char c : text) {
        glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, c);
    }
}

// Draw a vertical gradient background
void drawGradientBackground() {
    glBegin(GL_QUADS);
    glColor3fv(topColor);
    glVertex2f(0, windowHeight);
    glVertex2f(windowWidth, windowHeight);
    glColor3fv(bottomColor);
    glVertex2f(windowWidth, 0);
    glVertex2f(0, 0);
    glEnd();
}

// Initialize floating letters with random positions
void initFloatingLetters() {
    const std::string letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    for (int i = 0; i < 20; i++) {
        float x = rand() % windowWidth;
        float y = rand() % windowHeight;
        char letter = letters[rand() % letters.size()];
        floatingLetters.push_back({ letter, {x, y} });
    }
}

// Draw floating letters in the background
void drawFloatingLetters() {
    for (auto& letter : floatingLetters) {
        drawText(letter.second.first, letter.second.second, std::string(1, letter.first));
        // Make letters slowly move upwards
        letter.second.second += 0.1f;
        if (letter.second.second > windowHeight) letter.second.second = 0;
    }
}

// Button Action Functions
void playButtonAction() {
    std::cout << "Play Button Pressed!" << std::endl;
    // Transition to the game window
}

void continueButtonAction() {
    std::cout << "Continue Progress Button Pressed!" << std::endl;
}

void achievementsButtonAction() {
    std::cout << "Achievements Button Pressed!" << std::endl;
}

void rewardsButtonAction() {
    std::cout << "Rewards Button Pressed!" << std::endl;
}

void leaderboardButtonAction() {
    std::cout << "Leaderboard Button Pressed!" << std::endl;
}

void howToPlayButtonAction() {
    std::cout << "How to Play Button Pressed!" << std::endl;
}

void settingsButtonAction() {
    std::cout << "Settings Button Pressed!" << std::endl;
}

void exitButtonAction() {
    std::cout << "Exit Button Pressed!" << std::endl;
    exit(0);
}

// Draw a player profile widget (top left corner)
void drawProfileWidget() {
    // Draw rectangle for profile widget
    glColor3f(0.8f, 0.4f, 0.2f);
    glBegin(GL_QUADS);
    glVertex2f(10, windowHeight - 10);
    glVertex2f(210, windowHeight - 10);
    glVertex2f(210, windowHeight - 110);
    glVertex2f(10, windowHeight - 110);
    glEnd();

    // Draw profile username and progress
    drawText(20, windowHeight - 30, playerProfile.username + "'s Profile");
    drawText(20, windowHeight - 60, "Progress:");

    // Draw a progress bar showing percentage completion
    drawProgressBar(20, windowHeight - 80, 150, 15, playerProfile.progress);
}

// Draw a progress bar
void drawProgressBar(float x, float y, float width, float height, float progress) {
    // Background of the progress bar
    glColor3f(0.5f, 0.5f, 0.5f);
    glBegin(GL_QUADS);
    glVertex2f(x, y);
    glVertex2f(x + width, y);
    glVertex2f(x + width, y + height);
    glVertex2f(x, y + height);
    glEnd();

    // Filled part of the progress bar
    glColor3f(0.2f, 0.9f, 0.2f); // Green for progress
    glBegin(GL_QUADS);
    glVertex2f(x, y);
    glVertex2f(x + (width * progress), y);
    glVertex2f(x + (width * progress), y + height);
    glVertex2f(x, y + height);
    glEnd();
}

// Draw daily challenges panel (right side)
void drawDailyChallenges() {
    // Draw panel background
    glColor3f(0.4f, 0.4f, 0.9f);
    glBegin(GL_QUADS);
    glVertex2f(windowWidth - 210, windowHeight - 10);
    glVertex2f(windowWidth - 10, windowHeight - 10);
    glVertex2f(windowWidth - 10, windowHeight - 110);
    glVertex2f(windowWidth - 210, windowHeight - 110);
    glEnd();

    // Draw daily challenge header
    drawText(windowWidth - 200, windowHeight - 30, "Daily Challenges");

    // Draw progress for daily challenges
    drawText(windowWidth - 200, windowHeight - 60, "Progress:");

    // Progress bar for daily challenges
    drawProgressBar(windowWidth - 200, windowHeight - 80, 150, 15, dailyChallengeProgress);
}

// Draw achievement badges on the intro screen
void drawAchievementBadges() {
    // Example placeholder achievements
    drawText(20, 100, "Achievements:");
    drawText(40, 80, "- Solved 5 puzzles");
    drawText(40, 60, "- Completed 3 daily challenges");
}

// Draw sidebar with quick access to other sections
void drawSidebar() {
    // Placeholder for sidebar options (bottom left corner)
    drawText(20, 20, "Quick Access:");
    drawText(40, 40, "- Community");
    drawText(40, 20, "- Credits");
}

// Button hover animations
void playButtonAnimation(Button& button) {
    // Simple hover effect (make the button glow)
    glColor3f(0.2f, 0.6f, 0.8f);
    glBegin(GL_LINE_LOOP);
    glVertex2f(button.x, button.y);
    glVertex2f(button.x + button.width, button.y);
    glVertex2f(button.x + button.width, button.y - button.height);
    glVertex2f(button.x, button.y - button.height);
    glEnd();
}

// Main function to initialize OpenGL and GLUT
int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(windowWidth, windowHeight);
    glutCreateWindow("AI Crossword Game");

    // Initialize buttons and floating letters
    initButtons();
    initFloatingLetters();

    // Set up callbacks
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutMouseFunc(onMouseClick);

    // Enter the main loop
    glutMainLoop();
    return 0;
}
